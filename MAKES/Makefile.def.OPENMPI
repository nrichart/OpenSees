############################################################################
#
#  Program:  OpenSees
#
#  Purpose:  A Top-level Makefile to create the libraries needed
#	     to use the OpenSees framework. Works on Linux version 6.1
#            and below.
#
#  Written: fmk 
#  Created: 10/99
#
#  Send bug reports, comments or suggestions to fmckenna@ce.berkeley.edu
#
############################################################################

## ssh to machine from your own:
# chmod 'go+rwx' XXX.pem
# (right click running instance, click connect, click connect with standalone ssh client to get command:
# ssh -i XXX.pem root@YYY.amazonaws.com

# Following are commands to build OpenSees
# on EC2 FEDORA 64 bit machine (ami-7d0c6314) once logged in

# sudo yum install gcc.x86_64
# sudo yum install gcc-c++.x86_64
# sudo yum install gcc-gfortran.x86_64
# sudo yum install tcl.x86_64
# sudo yum install tcl-devel.x86_64
# sudo yum install svn
# sudo yum install emacs
# mkdir bin
# mkdir lib
# svn co svn://opensees.berkeley.edu:/usr/local/svn/OpenSees/trunk OpenSees
# cd OpenSees
# cp ./MAKES/Makefile.def.EC2-REDHAT-ENTERPRISE ./Makefile.def
# make

# END of commands to build OpenSees.


# %---------------------------------%
# |  SECTION 1: PROGRAM             |
# %---------------------------------%
#
# Specify the location and name of the OpenSees interpreter program
# that will be created (if this all works!)
prefix = /home/richart/dev/eesd/OpenSees
OpenSees_PROGRAM = $(prefix)/bin/OpenSees

OPERATING_SYSTEM = LINUX
GRAPHICS = NONE
GRAPHIC_FLAG = -D_NOGRAPHICS
PROGRAMMING_MODE = SEQUENTIAL
DEBUG_MODE = DEBUG
RELIABILITY = NO_RELIABILITY


# %---------------------------------%
# |  SECTION 2: PATHS               |
# %---------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries or if you have
# any of the libraries already leave the directory location blank AND
# remove the directory from DIRS.

BASE		= $(prefix)
FE		= $(prefix)/SRC

#PROGRAMMING_MODE = SEQUENTIAL
PROGRAMMING_MODE = PARALLEL
#PROGRAMMING_MODE = PARALLEL_INTERPRETERS

OpenSees_PROGRAM = $(prefix)/bin/OpenSees
PROGRAMMING_FLAG = 

ifeq ($(PROGRAMMING_MODE), PARALLEL)
OpenSees_PROGRAM = $(prefix)/bin/OpenSeesSP
PROGRAMMING_FLAG = -D_PARALLEL_PROCESSING
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)
OpenSees_PROGRAM = $(prefix)/bin/OpenSeesMP
PROGRAMMING_FLAG = -D_PARALLEL_INTERPRETERS
endif

PROGRAMMING_FLAG += 

AMDdir       = $(prefix)/OTHER/AMD
BLASdir      = $(prefix)/OTHER/BLAS
CBLASdir     = $(prefix)/OTHER/CBLAS
LAPACKdir    = $(prefix)/OTHER/LAPACK
SUPERLUdir   = $(prefix)/OTHER/SuperLU_4.1/SRC
SUPERLU_DISTdir   = $(prefix)/OTHER/SuperLU_DIST_4.3/SRC
ARPACKdir    = $(prefix)/OTHER/ARPACK
UMFPACKdir   = $(prefix)/OTHER/UMFPACK
METISdir     = $(prefix)/OTHER/METIS
CSPARSEdir   = $(prefix)/OTHER/CSPARSE
SRCdir       = $(prefix)/SRC


DIRS        = $(SRCdir) $(prefix)/DEVELOPER  $(prefix)/OTHER/CSPARSE

# %-------------------------------------------------------%
# | SECTION 3: LIBRARIES                                  |
# |                                                       |
# | The following section defines the libraries that will |
# | be created and/or linked with when the libraries are  | 
# | being created or linked with.                         |
# %-------------------------------------------------------%
#
# Note: if vendor supplied BLAS and LAPACK libraries leave the
# libraries blank. You have to get your own copy of the tcl/tk 
# library!! 
#
# Note: For libraries that will be created (any in DIRS above)
# make sure the directory exsists where you want the library to go!

FE_LIBRARY      = $(prefix)/lib/libOpenSees.a
NDARRAY_LIBRARY = $(prefix)/lib/libndarray.a # BJ_UCD jeremic@ucdavis.edu
MATMOD_LIBRARY  = $(prefix)/lib/libmatmod.a  # BJ_UCD jeremic@ucdavis.edu
BJMISC_LIBRARY  = $(prefix)/lib/libBJmisc.a  # BJ_UCD jeremic@ucdavis.edu
LAPACK_LIBRARY  = -lopenblas
BLAS_LIBRARY    = -lopenblas
SUPERLU_LIBRARY = -lsuperlu
CBLAS_LIBRARY   = -lopenblas
CSPARSE_LIBRARY   = $(prefix)/lib/libcsparse.a
ARPACK_LIBRARY  = -larpack
AMD_LIBRARY  = -lamd
UMFPACK_LIBRARY = -lumfpack
METIS_LIBRARY   = -lmetis
TCL_LIBRARY = -ltcl8.6
BLITZ_LIBRARY = -lblitz
GRAPHIC_LIBRARY     = 


ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
DISTRIBUTED_SUPERLU_LIBRARY     = 
else
DISTRIBUTED_SUPERLU_LIBRARY     = $(SUPERLU_LIBRARY) -lsuperlu_dist
endif

# WATCH OUT .. These libraries are removed when 'make wipe' is invoked.
WIPE_LIBS	= $(FE_LIBRARY)
                #\
		#$(LAPACK_LIBRARY) \
		#$(BLAS_LIBRARY) \
		#$(CBLAS_LIBRARY) \
		#$(SUPERLU_LIBRARY) \
		#$(ARPACK_LIBRARY) \
		#$(UMFPACK_LIBRARY) \
	        #$(METIS_LIBRARY)

# %---------------------------------------------------------%
# | SECTION 4: COMPILERS                                    |
# |                                                         |
# | The following macros specify compilers, linker/loaders, |
# | the archiver, and their options.  You need to make sure |
# | these are correct for your system.                      |
# %---------------------------------------------------------%

# Compilers
ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)

CC++	= /usr/bin/g++
CC      = /usr/bin/gcc
FC	= /usr/bin/gfortran

else

CC++            =  mpicxx
CC              =  mpicc
FC              =  mpif90
F90             =  mpif90
FORTRAN             =  $(FC)

LINKER          =  $(CC++)

endif


AR		= ar 
ARFLAGS		= cqls
RANLIB		= ranlib
RANLIBFLAGS     =

# Compiler Flags
#
# NOTES:
#    C++ FLAGS TAKE need _UNIX or _WIN32 for preprocessor dircetives
#         - the _WIN32 for the Windows95/98 or NT operating system.
#    C FLAGS used -DUSE_VENDOR_BLAS (needed in SuperLU) if UNIX in C++ FLAGS
#
OS_FLAG = -D_LINUX
DEBUG_FLAG = -Wall -Wextra -g3 -ggdb
#DEBUG_FLAG =
OPTIM_FLAGS = -O3 -march=native
C++FLAGS         = -D_LINUX -D_UNIX  -D_TCL85 \
	$(GRAPHIC_FLAG) $(RELIABILITY_FLAG) $(DEBUG_FLAG) \
	$(PROGRAMMING_FLAG) $(MUMPS_FLAG) $(OPTIM_FLAGS) -ffloat-store 
CFLAGS          = $(OPTIM_FLAGS) $(DEBUG_FLAG)
FFLAGS          = $(OPTIM_FLAGS) $(DEBUG_FLAG)

# Linker
LINKER          = $(CC++)
LINKFLAGS       = -rdynamic


# Misc
MAKE		= make
CD              = cd
ECHO            = echo
RM              = rm
RMFLAGS         = -f
SHELL           = /bin/sh

# %---------------------------------------------------------%
# | SECTION 5: COMPILATION                                  |
# |                                                         |
# | The following macros specify the macros used in         |
# | to compile the source code into object code.            |
# %---------------------------------------------------------%

.SUFFIXES:
.SUFFIXES:	.C .c .f .f90 .cpp .o .cpp

#
# %------------------%
# | Default command. |
# %------------------%
#
.DEFAULT:
	@$(ECHO) "Unknown target $@, try:  make help"
#
# %-------------------------------------------%
# |  Command to build .o files from .f files. |
# %-------------------------------------------%
#

.cpp.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@

.C.o:
	@$(ECHO) Making $@ from $<
	$(CC++) $(C++FLAGS) $(INCLUDES) -c $< -o $@
.c.o:
	@$(ECHO) Making $@ from $<
	$(CC) $(CFLAGS) -c $< -o $@
.f.o:      
	@$(ECHO) Making $@ from $<
	$(FC) $(FFLAGS) -c $< -o $@

# %---------------------------------------------------------%
# | SECTION 6: OTHER LIBRARIES                              |
# |                                                         |
# | The following macros specify other libraries that must  |
# | be linked with when creating executables. These are     |
# | platform specific and typically order does matter!!     |
# %---------------------------------------------------------%





ifeq ($(PROGRAMMMING_MODE), SEQUENTIAL)
HAVEMUMPS = NO
MUMPS_FLAG = 
MUMPS_INCLUDE =
MUMPS_LIB = 
else
HAVEMUMPS = YES
endif

ifeq ($(HAVEMUMPS), YES)

MUMPS = YES
MUMPS_FLAG = -D_MUMPS -D_OPENMPI
#MUMPS_DIR = /gpfs/fmk/MUMPS_4.6.4
MUMPS_DIR = 

PLAT    = OPENMPI-GCC

SCALAP  = $(BLACSlib) $(SCALAPlib) $(BLACSlib)

BLACS_DIR = 
SCALAPACK_DIR = 
LAPACK_DIR = 

BLACS_LIB = 
SCALAPACK_LIB = 
BLACS_LIB = 
SCALAPACK_LIB = 

PLAT    = LINUX

SCALAP  = $(BLACS_LIB) $(SCALAPACK_LIB)

MUMPS_LIB = -ldmumps
MUMPS_INCLUDE = -I/usr/include

endif



MACHINE_LINKLIBS  = -L$(BASE)/lib \
		  -L$(HOME)/lib 

MACHINE_NUMERICAL_LIBS  = -lm \
		$(ARPACK_LIBRARY) \
		$(SUPERLU_LIBRARY) \
		$(UMFPACK_LIBRARY) \
	        $(LAPACK_LIBRARY) $(BLAS_LIBRARY) $(CBLAS_LIBRARY) $(CSPARSE_LIBRARY) \
		$(DISTRIBUTED_SUPERLU_LIBRARY) $(AMD_LIBRARY) $(GRAPHIC_LIBRARY)\
		-ldl -lgfortran 


ifeq ($(PROGRAMMING_MODE), SEQUENTIAL)
PARALLEL_LIB = 
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL)
PARALLEL_LIB = $(METIS_LIBRARY) $(METIS_LIBRARY) $(MUMPS_LIB)
endif

ifeq ($(PROGRAMMING_MODE), PARALLEL_INTERPRETERS)

PARALLEL_LIB = $(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSparseGenColLinSOE.o \
	$(FE)/system_of_eqn/linearSOE/sparseGEN/DistributedSuperLU.o \
	$(METIS_LIBRARY) $(METIS_LIBRARY) $(MUMPS_LIB) -lmpi -lmpi_f77

endif


MACHINE_SPECIFIC_LIBS = 


# %---------------------------------------------------------%
# | SECTION 7: INCLUDE FILES                                |
# |                                                         |
# | The following macros specify include files needed for   |
# | compilation.                                            |
# %---------------------------------------------------------%
MACHINE_INCLUDES        = -I/usr/include \
			  -I$(BASE)/include \
			  -I/usr/include/cxx \
			  -I$(SUPERLU_DISTdir) $(MUMPS_INCLUDE) \
			  -I$(HOME)/include -I$(HOME)/blitz \
			  -I/usr/include/tcl8.6 -I/usr/include/superlu -I/usr/include/superlu-dist

# this file contains all the OpenSees/SRC includes
include $(FE)/Makefile.incl

TCL_INCLUDES = -I/usr/includes/tcl-private/generic

INCLUDES = $(TCL_INCLUDES) $(FE_INCLUDES) $(MACHINE_INCLUDES)








